name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust with explicit verification
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      # Verify Rust installation
      - name: Verify Rust installation
        run: |
          rustc --version
          cargo --version
          rustfmt --version
          cargo clippy --version

      # Use Swatinem's cache action (more reliable for Rust)
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache on lock file changes
          key: ${{ hashFiles('Cargo.lock') }}
          # Also cache based on Cargo.toml for when lock file doesn't exist yet
          shared-key: "aceryx"

      # Check formatting first (fast fail)
      - name: Check code formatting
        run: cargo fmt --all -- --check

      # Run clippy for linting (only default features for now)
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      # Run tests with default features
      - name: Run tests
        run: cargo test

      # Build in release mode with default features
      - name: Build release
        run: cargo build --release

      # Test that optional features compile
      - name: Test feature compilation
        run: |
          cargo check --features redis-storage
          cargo check --features postgres-storage
          cargo check --features ai-agents
          cargo check --all-features

      # Upload the compiled binary
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: aceryx-${{ runner.os }}-${{ github.sha }}
          path: target/release/aceryx
          retention-days: 30