[package]
name = "aceryx"
version = "0.1.0"
edition = "2021"
description = "The Apache Camel of AI - Visual AI workflow platform for enterprise integration"
license = "Apache-2.0"
repository = "https://github.com/neural-chilli/aceryx"
homepage = "https://aceryx.org"
documentation = "https://docs.aceryx.org"
keywords = ["ai", "workflow", "automation", "enterprise", "integration"]
categories = ["web-programming", "command-line-utilities"]
readme = "README.md"

# Library and binary configuration
[lib]
name = "aceryx"
path = "src/lib.rs"

[[bin]]
name = "aceryx"
path = "src/main.rs"

[dependencies]
# Core async runtime
tokio = { version = "1.0", features = ["full"] }

# Web framework
axum = { version = "0.7", features = ["macros", "multipart", "ws"] }
tower = { version = "0.4", features = ["full"] }
tower-http = { version = "0.5", features = ["fs", "cors", "trace", "timeout", "compression-full"] }

# HTTP client for tool integrations
reqwest = { version = "0.12", features = ["json", "stream"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
toml = "0.8"

# Configuration management
config = "0.14"
clap = { version = "4.0", features = ["derive", "env"] }

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Async traits
async-trait = "0.1"

# Logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

# UUID generation for flow/node IDs
uuid = { version = "1.0", features = ["v4", "serde"] }

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# Template rendering (for server-side UI)
minijinja = { version = "2.0", features = ["loader"] }

# Static asset embedding
rust-embed = { version = "8.0", features = ["debug-embed"] }
mime_guess = "2.0"

# High-performance concurrent collections
dashmap = "5.5"

# System information
num_cpus = "1.0"

# Storage backends (all optional for modular compilation)
redis = { version = "0.26", optional = true }
sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid"], optional = true }

# AI integration foundation
rig-core = { version = "0.2", optional = true }

[dev-dependencies]
tempfile = "3.0"
tokio-test = "0.4"
tower = { version = "0.4", features = ["util"] }

[features]
default = ["memory-storage"]

# Storage backend features
memory-storage = []
redis-storage = ["dep:redis"]
postgres-storage = ["dep:sqlx"]

# AI integration
ai-agents = ["dep:rig-core"]

# All features for development/testing
full = ["redis-storage", "postgres-storage", "ai-agents"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = true

# Build script environment variables for version info
[build-dependencies]
# These would be used in a build.rs file to inject build metadata