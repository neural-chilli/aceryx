[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "An open-source agentic flow builder for Rust\n\nAceryx is a modern, scalable platform for building and orchestrating AI agent workflows. Named after the maple tree, it embodies the principle of natural coordination - multiple agents branching, merging, and collaborating toward common goals with elegant simplicity.\n\n\n\nVisual Flow Designer - Intuitive drag-and-drop interface powered by ReactFlow\nMCP Integration - Native Model Context Protocol support for seamless tool connectivity\nScalable Architecture - From single binary to distributed clusters\nMultiple Backends - In-memory, Redis, and PostgreSQL storage options\nAI-First - Built on Rig for robust AI tooling and agent coordination\nProduction Ready - Designed for enterprise deployment with clustering and resilience\n\n\n\n\n\n\n# Download and run - no setup required\ncurl -L https://github.com/yourusername/aceryx/releases/latest/download/aceryx-linux-x64 -o aceryx\nchmod +x aceryx\n./aceryx serve\nOpen http://localhost:8080 to access the flow designer.\n\n\n\ndocker run -p 8080:8080 aceryx/aceryx:latest\n\n\n\ngit clone https://github.com/yourusername/aceryx.git\ncd aceryx\ncargo run -- serve\n\n\n\n\nAceryx is built with a modular, trait-based architecture that scales from development to production:\n\n\nAll backends implement the same FlowStorage trait, enabling seamless transitions between deployment modes:\n\nIn-Memory - Perfect for development and single-node deployments\nRedis - Distributed coordination with persistence and pub/sub\nPostgreSQL - Enterprise-grade persistence with ACID guarantees\n\n\n\n\nBackend (Rust) - Axum - High-performance web framework - Rig - AI agent tooling and orchestration - MCP - Model Context Protocol integration - Tokio - Async runtime\nFrontend - ReactFlow - Visual flow designer - HTMX + Alpine.js - Interactive UI - Minijinja - Server-side templating - Tabler - UI components and styling - Tabulator.js - Advanced data tables - Cytoscape.js - Graph visualization - Timeline.js - Timeline components\n\n\n\n\n\n\n# Server Configuration\nACERYX_PORT=8080\nACERYX_HOST=0.0.0.0\n\n# Storage Backend\nACERYX_STORAGE=memory  # memory | redis | postgres\n\n# Redis Configuration (when using Redis backend)\nREDIS_URL=redis://localhost:6379\n\n# PostgreSQL Configuration (when using PostgreSQL backend)\nDATABASE_URL=postgresql://user:pass@localhost/aceryx\n\n# AI Configuration\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n\n\n\nCreate aceryx.toml in your working directory:\n[server]\nport = 8080\nhost = \"0.0.0.0\"\n\n[storage]\nbackend = \"memory\"  # memory | redis | postgres\n\n[storage.redis]\nurl = \"redis://localhost:6379\"\npool_size = 10\n\n[storage.postgres]\nurl = \"postgresql://user:pass@localhost/aceryx\"\nmax_connections = 20\n\n[ai]\ndefault_provider = \"openai\"\nmax_tokens = 4096\ntimeout = 30\n\n[clustering]\nnode_id = \"node-1\"\ndiscovery_interval = 30\nheartbeat_interval = 10\n\n\n\n\n\n\nname: \"Document Processor\"\ndescription: \"Processes uploaded documents with AI analysis\"\n\nnodes:\n  - id: \"upload\"\n    type: \"trigger\"\n    config:\n      trigger_type: \"file_upload\"\n      accepted_types: [\"pdf\", \"docx\", \"txt\"]\n\n  - id: \"extract\"\n    type: \"mcp_tool\"\n    config:\n      tool: \"document_extractor\"\n      input_mapping:\n        file: \"{{upload.file}}\"\n\n  - id: \"analyze\"\n    type: \"ai_agent\"\n    config:\n      provider: \"openai\"\n      model: \"gpt-4\"\n      prompt: \"Analyze this document and extract key insights: {{extract.content}}\"\n\n  - id: \"store\"\n    type: \"database\"\n    config:\n      operation: \"insert\"\n      table: \"documents\"\n      data:\n        content: \"{{extract.content}}\"\n        analysis: \"{{analyze.result}}\"\n        processed_at: \"{{now()}}\"\n\nedges:\n  - from: \"upload\"\n    to: \"extract\"\n  - from: \"extract\"\n    to: \"analyze\"\n  - from: \"analyze\"\n    to: \"store\"\n\n\n\n\nConditional Branching - Route flow execution based on data or AI decisions\nParallel Execution - Run multiple agents simultaneously\nError Handling - Automatic retries and fallback strategies\nState Management - Persistent context across distributed nodes\nReal-time Monitoring - Live flow execution tracking\n\n\n\n\n\n\nDocument Processing - AI-powered document analysis and transformation\nCustomer Support - Automated ticket routing and response generation\nData Pipelines - AI-enhanced data processing and enrichment\nContent Creation - Multi-step content generation workflows\nResearch Automation - Automated research and synthesis tasks\nIntegration Workflows - Connect disparate systems with AI orchestration\n\n\n\n\n\n\n# Production single-node deployment\nACERYX_STORAGE=postgres \\\nDATABASE_URL=postgresql://user:pass@localhost/aceryx \\\n./aceryx serve --port 8080\n\n\n\n# Node 1\nACERYX_STORAGE=redis \\\nREDIS_URL=redis://redis-cluster:6379 \\\nACERYX_NODE_ID=node-1 \\\n./aceryx serve --port 8080\n\n# Node 2\nACERYX_STORAGE=redis \\\nREDIS_URL=redis://redis-cluster:6379 \\\nACERYX_NODE_ID=node-2 \\\n./aceryx serve --port 8081\n\n\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aceryx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: aceryx\n  template:\n    metadata:\n      labels:\n        app: aceryx\n    spec:\n      containers:\n      - name: aceryx\n        image: aceryx/aceryx:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: ACERYX_STORAGE\n          value: \"redis\"\n        - name: REDIS_URL\n          value: \"redis://redis-service:6379\"\n\n\n\n\nWe welcome contributions! Please see our Contributing Guide for details.\n\n\n# Clone the repository\ngit clone https://github.com/yourusername/aceryx.git\ncd aceryx\n\n# Install dependencies\ncargo build\n\n# Run tests\ncargo test\n\n# Start development server\ncargo run -- serve --dev\n\n# Build frontend assets\nnpm install\nnpm run build\n\n\n\naceryx/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ main.rs              # Application entry point\n‚îÇ   ‚îú‚îÄ‚îÄ server/              # Axum web server\n‚îÇ   ‚îú‚îÄ‚îÄ storage/             # Storage trait and implementations\n‚îÇ   ‚îú‚îÄ‚îÄ agents/              # AI agent coordination\n‚îÇ   ‚îú‚îÄ‚îÄ flows/               # Flow execution engine\n‚îÇ   ‚îú‚îÄ‚îÄ mcp/                 # Model Context Protocol integration\n‚îÇ   ‚îî‚îÄ‚îÄ config/              # Configuration management\n‚îú‚îÄ‚îÄ web/                     # Frontend assets\n‚îÇ   ‚îú‚îÄ‚îÄ components/          # React components\n‚îÇ   ‚îú‚îÄ‚îÄ flows/              # ReactFlow designer\n‚îÇ   ‚îî‚îÄ‚îÄ static/             # Static assets\n‚îú‚îÄ‚îÄ migrations/             # Database migrations\n‚îî‚îÄ‚îÄ docs/                   # Documentation\n\n\n\n\n\nUser Guide - Complete usage documentation\nAPI Reference - REST API documentation\nFlow Reference - Flow configuration guide\nMCP Integration - Model Context Protocol usage\nDeployment Guide - Production deployment\nContributing - Development and contribution guide\n\n\n\n\n\nWebsite: aceryx.org\nDocumentation: docs.aceryx.org\nDiscord: Join our community\nTwitter: @aceryx\n\n\n\n\nThis project is licensed under the Apache License 2.0 - see the LICENSE file for details.\n\n\n\n\nThe Rust community for amazing tooling and libraries\nReactFlow for the excellent flow designer foundation\nRig for AI agent orchestration\nThe MCP team for standardizing AI tool integration\n\n\nMade with üçÅ and Rust",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "Visual Flow Designer - Intuitive drag-and-drop interface powered by ReactFlow\nMCP Integration - Native Model Context Protocol support for seamless tool connectivity\nScalable Architecture - From single binary to distributed clusters\nMultiple Backends - In-memory, Redis, and PostgreSQL storage options\nAI-First - Built on Rig for robust AI tooling and agent coordination\nProduction Ready - Designed for enterprise deployment with clustering and resilience",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#quick-start",
    "href": "index.html#quick-start",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "# Download and run - no setup required\ncurl -L https://github.com/yourusername/aceryx/releases/latest/download/aceryx-linux-x64 -o aceryx\nchmod +x aceryx\n./aceryx serve\nOpen http://localhost:8080 to access the flow designer.\n\n\n\ndocker run -p 8080:8080 aceryx/aceryx:latest\n\n\n\ngit clone https://github.com/yourusername/aceryx.git\ncd aceryx\ncargo run -- serve",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#architecture",
    "href": "index.html#architecture",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "Aceryx is built with a modular, trait-based architecture that scales from development to production:\n\n\nAll backends implement the same FlowStorage trait, enabling seamless transitions between deployment modes:\n\nIn-Memory - Perfect for development and single-node deployments\nRedis - Distributed coordination with persistence and pub/sub\nPostgreSQL - Enterprise-grade persistence with ACID guarantees\n\n\n\n\nBackend (Rust) - Axum - High-performance web framework - Rig - AI agent tooling and orchestration - MCP - Model Context Protocol integration - Tokio - Async runtime\nFrontend - ReactFlow - Visual flow designer - HTMX + Alpine.js - Interactive UI - Minijinja - Server-side templating - Tabler - UI components and styling - Tabulator.js - Advanced data tables - Cytoscape.js - Graph visualization - Timeline.js - Timeline components",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#configuration",
    "href": "index.html#configuration",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "# Server Configuration\nACERYX_PORT=8080\nACERYX_HOST=0.0.0.0\n\n# Storage Backend\nACERYX_STORAGE=memory  # memory | redis | postgres\n\n# Redis Configuration (when using Redis backend)\nREDIS_URL=redis://localhost:6379\n\n# PostgreSQL Configuration (when using PostgreSQL backend)\nDATABASE_URL=postgresql://user:pass@localhost/aceryx\n\n# AI Configuration\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n\n\n\nCreate aceryx.toml in your working directory:\n[server]\nport = 8080\nhost = \"0.0.0.0\"\n\n[storage]\nbackend = \"memory\"  # memory | redis | postgres\n\n[storage.redis]\nurl = \"redis://localhost:6379\"\npool_size = 10\n\n[storage.postgres]\nurl = \"postgresql://user:pass@localhost/aceryx\"\nmax_connections = 20\n\n[ai]\ndefault_provider = \"openai\"\nmax_tokens = 4096\ntimeout = 30\n\n[clustering]\nnode_id = \"node-1\"\ndiscovery_interval = 30\nheartbeat_interval = 10",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#creating-flows",
    "href": "index.html#creating-flows",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "name: \"Document Processor\"\ndescription: \"Processes uploaded documents with AI analysis\"\n\nnodes:\n  - id: \"upload\"\n    type: \"trigger\"\n    config:\n      trigger_type: \"file_upload\"\n      accepted_types: [\"pdf\", \"docx\", \"txt\"]\n\n  - id: \"extract\"\n    type: \"mcp_tool\"\n    config:\n      tool: \"document_extractor\"\n      input_mapping:\n        file: \"{{upload.file}}\"\n\n  - id: \"analyze\"\n    type: \"ai_agent\"\n    config:\n      provider: \"openai\"\n      model: \"gpt-4\"\n      prompt: \"Analyze this document and extract key insights: {{extract.content}}\"\n\n  - id: \"store\"\n    type: \"database\"\n    config:\n      operation: \"insert\"\n      table: \"documents\"\n      data:\n        content: \"{{extract.content}}\"\n        analysis: \"{{analyze.result}}\"\n        processed_at: \"{{now()}}\"\n\nedges:\n  - from: \"upload\"\n    to: \"extract\"\n  - from: \"extract\"\n    to: \"analyze\"\n  - from: \"analyze\"\n    to: \"store\"\n\n\n\n\nConditional Branching - Route flow execution based on data or AI decisions\nParallel Execution - Run multiple agents simultaneously\nError Handling - Automatic retries and fallback strategies\nState Management - Persistent context across distributed nodes\nReal-time Monitoring - Live flow execution tracking",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#use-cases",
    "href": "index.html#use-cases",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "Document Processing - AI-powered document analysis and transformation\nCustomer Support - Automated ticket routing and response generation\nData Pipelines - AI-enhanced data processing and enrichment\nContent Creation - Multi-step content generation workflows\nResearch Automation - Automated research and synthesis tasks\nIntegration Workflows - Connect disparate systems with AI orchestration",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#deployment",
    "href": "index.html#deployment",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "# Production single-node deployment\nACERYX_STORAGE=postgres \\\nDATABASE_URL=postgresql://user:pass@localhost/aceryx \\\n./aceryx serve --port 8080\n\n\n\n# Node 1\nACERYX_STORAGE=redis \\\nREDIS_URL=redis://redis-cluster:6379 \\\nACERYX_NODE_ID=node-1 \\\n./aceryx serve --port 8080\n\n# Node 2\nACERYX_STORAGE=redis \\\nREDIS_URL=redis://redis-cluster:6379 \\\nACERYX_NODE_ID=node-2 \\\n./aceryx serve --port 8081\n\n\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aceryx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: aceryx\n  template:\n    metadata:\n      labels:\n        app: aceryx\n    spec:\n      containers:\n      - name: aceryx\n        image: aceryx/aceryx:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: ACERYX_STORAGE\n          value: \"redis\"\n        - name: REDIS_URL\n          value: \"redis://redis-service:6379\"",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "We welcome contributions! Please see our Contributing Guide for details.\n\n\n# Clone the repository\ngit clone https://github.com/yourusername/aceryx.git\ncd aceryx\n\n# Install dependencies\ncargo build\n\n# Run tests\ncargo test\n\n# Start development server\ncargo run -- serve --dev\n\n# Build frontend assets\nnpm install\nnpm run build\n\n\n\naceryx/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ main.rs              # Application entry point\n‚îÇ   ‚îú‚îÄ‚îÄ server/              # Axum web server\n‚îÇ   ‚îú‚îÄ‚îÄ storage/             # Storage trait and implementations\n‚îÇ   ‚îú‚îÄ‚îÄ agents/              # AI agent coordination\n‚îÇ   ‚îú‚îÄ‚îÄ flows/               # Flow execution engine\n‚îÇ   ‚îú‚îÄ‚îÄ mcp/                 # Model Context Protocol integration\n‚îÇ   ‚îî‚îÄ‚îÄ config/              # Configuration management\n‚îú‚îÄ‚îÄ web/                     # Frontend assets\n‚îÇ   ‚îú‚îÄ‚îÄ components/          # React components\n‚îÇ   ‚îú‚îÄ‚îÄ flows/              # ReactFlow designer\n‚îÇ   ‚îî‚îÄ‚îÄ static/             # Static assets\n‚îú‚îÄ‚îÄ migrations/             # Database migrations\n‚îî‚îÄ‚îÄ docs/                   # Documentation",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "User Guide - Complete usage documentation\nAPI Reference - REST API documentation\nFlow Reference - Flow configuration guide\nMCP Integration - Model Context Protocol usage\nDeployment Guide - Production deployment\nContributing - Development and contribution guide",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "Website: aceryx.org\nDocumentation: docs.aceryx.org\nDiscord: Join our community\nTwitter: @aceryx",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "This project is licensed under the Apache License 2.0 - see the LICENSE file for details.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Aceryx üçÅ",
    "section": "",
    "text": "The Rust community for amazing tooling and libraries\nReactFlow for the excellent flow designer foundation\nRig for AI agent orchestration\nThe MCP team for standardizing AI tool integration\n\n\nMade with üçÅ and Rust",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "storage.html",
    "href": "storage.html",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "This implementation establishes the foundational storage layer and universal tool system for Aceryx - ‚ÄúThe Apache Camel of AI‚Äù. It provides a trait-first architecture that enables visual AI workflow design, enterprise system integration, and polyglot tool execution.\n\n\nThe implementation follows a modular, trait-based design that scales from development to production:\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Web UI        ‚îÇ    ‚îÇ   REST API       ‚îÇ    ‚îÇ   CLI Tools     ‚îÇ\n‚îÇ   (ReactFlow)   ‚îÇ    ‚îÇ   (Axum)         ‚îÇ    ‚îÇ   (Clap)        ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ                       ‚îÇ                       ‚îÇ\n         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                                 ‚îÇ\n                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n                    ‚îÇ   Core Application      ‚îÇ\n                    ‚îÇ   - Storage Traits      ‚îÇ\n                    ‚îÇ   - Tool Registry       ‚îÇ\n                    ‚îÇ   - Configuration       ‚îÇ\n                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                                 ‚îÇ\n         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n         ‚îÇ                       ‚îÇ                      ‚îÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Storage       ‚îÇ    ‚îÇ   Tool System     ‚îÇ    ‚îÇ   Execution   ‚îÇ\n‚îÇ   - Memory      ‚îÇ    ‚îÇ   - Native Tools  ‚îÇ    ‚îÇ   - Context   ‚îÇ\n‚îÇ   - Redis       ‚îÇ    ‚îÇ   - MCP Protocol  ‚îÇ    ‚îÇ   - Security  ‚îÇ\n‚îÇ   - PostgreSQL  ‚îÇ    ‚îÇ   - Custom Tools  ‚îÇ    ‚îÇ   - Timeouts  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\nsrc/\n‚îú‚îÄ‚îÄ main.rs                 # CLI entry point with storage & tools integration\n‚îú‚îÄ‚îÄ api/                    # REST API handlers\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs             # API router setup\n‚îÇ   ‚îú‚îÄ‚îÄ flows.rs           # Flow CRUD endpoints\n‚îÇ   ‚îú‚îÄ‚îÄ tools.rs           # Tool listing and execution\n‚îÇ   ‚îî‚îÄ‚îÄ middleware.rs      # Request logging, error handling\n‚îú‚îÄ‚îÄ config/                # Configuration management\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs             # Config loading with precedence\n‚îÇ   ‚îî‚îÄ‚îÄ types.rs           # Config structs and validation\n‚îú‚îÄ‚îÄ error.rs               # Error types and HTTP responses\n‚îú‚îÄ‚îÄ storage/               # Storage traits and implementations\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs            # FlowStorage trait definition\n‚îÇ   ‚îú‚îÄ‚îÄ memory.rs         # In-memory implementation\n‚îÇ   ‚îî‚îÄ‚îÄ types.rs          # Flow, ToolDefinition, domain types\n‚îú‚îÄ‚îÄ tools/                 # Universal tool system\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs            # Tool and ToolProtocol traits\n‚îÇ   ‚îî‚îÄ‚îÄ native.rs         # Built-in tools (HTTP, JSON)\n‚îî‚îÄ‚îÄ web/                   # Web interface\n    ‚îú‚îÄ‚îÄ mod.rs            # Server startup with integrations\n    ‚îú‚îÄ‚îÄ handlers.rs       # Web UI handlers\n    ‚îú‚îÄ‚îÄ static_assets.rs  # Embedded static files\n    ‚îî‚îÄ‚îÄ templates.rs      # Template rendering\n\n\n\n\n\n\nFlowStorage trait: Universal interface for all storage backends\nMemory implementation: High-performance, concurrent in-memory storage\nReady for Redis/PostgreSQL: Trait design enables easy backend additions\nCRUD operations: Complete flow and tool management\nSearch & filtering: Full-text search and structured filtering\nVersioning support: Flow version management\n\n\n\n\n\nTool trait: Standard interface for all tool implementations\nToolProtocol trait: Plugin system for tool discovery and creation\nNative tools: Built-in HTTP request and JSON transformation tools\nTool registry: Centralized tool management with caching\nExecution context: Rich context for tool execution with timeouts\nHealth monitoring: Protocol and tool health checking\n\n\n\n\n\nRESTful endpoints: Complete CRUD API for flows and tools\nError handling: Structured error responses with proper HTTP codes\nRequest logging: Comprehensive request/response logging\nCORS support: Configurable CORS for web integration\nRate limiting: Basic rate limiting implementation\nHealth checks: System and component health endpoints\n\n\n\n\n\nMulti-source loading: CLI args &gt; env vars &gt; config file &gt; defaults\nValidation: Comprehensive configuration validation\nDevelopment/Production: Separate configuration templates\nTOML support: Human-readable configuration format\n\n\n\n\n\nConcurrent access: Thread-safe storage implementations\nRequest timeouts: Configurable execution timeouts\nStructured logging: JSON logging for production environments\nGraceful shutdown: Signal handling and cleanup\nPerformance monitoring: Basic metrics and health checks\n\n\n\n\n\n\n\n# Development mode with defaults\ncargo run -- serve --dev\n\n# Production mode with custom config\ncargo run -- serve --config aceryx.production.toml --port 8080\n\n# With environment variables\nACERYX_STORAGE=memory ACERYX_PORT=3000 cargo run -- serve\n\n\n\n# List available tools\ncargo run -- tools list\n\n# Filter by category\ncargo run -- tools list --category http\n\n# Refresh tools from protocols\ncargo run -- tools refresh\n\n# Execute a tool\ncargo run -- tools execute json_transform --input '{\"data\": {\"test\": \"value\"}, \"operation\": \"validate\"}'\n\n\n\n# Generate sample configurations\ncargo run -- config                    # Development config\ncargo run -- config --production       # Production config\n\n\n\n# List flows\ncurl http://localhost:8080/api/v1/flows\n\n# Create a flow\ncurl -X POST http://localhost:8080/api/v1/flows \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"My Flow\", \"description\": \"Test flow\"}'\n\n# List tools\ncurl http://localhost:8080/api/v1/tools\n\n# Execute a tool\ncurl -X POST http://localhost:8080/api/v1/tools/execute/http_request \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"input\": {\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"}}'\n\n\n\n\nThe implementation includes comprehensive tests:\n# Unit tests\ncargo test\n\n# Integration tests\ncargo test --test integration_tests\n\n# Performance tests\ncargo test test_performance_characteristics -- --nocapture\n\n# With all features\ncargo test --all-features\n\n\n\n‚úÖ Storage trait implementations\n‚úÖ Tool system functionality\n‚úÖ API endpoint behavior\n‚úÖ Error handling scenarios\n‚úÖ Configuration loading\n‚úÖ Concurrent access patterns\n‚úÖ Performance characteristics\n\n\n\n\n\n\n\n\nImplement the FlowStorage trait:\n\npub struct RedisStorage {\n    client: redis::Client,\n}\n\n#[async_trait]\nimpl FlowStorage for RedisStorage {\n    async fn create_flow(&self, flow: Flow) -&gt; Result&lt;FlowId&gt; {\n        // Implementation\n    }\n    // ... other methods\n}\n\nAdd feature flag to Cargo.toml\nUpdate configuration types\nIntegrate in main.rs\n\n\n\n\n\nImplement the ToolProtocol trait:\n\npub struct McpProtocol {\n    // MCP client implementation\n}\n\n#[async_trait]\nimpl ToolProtocol for McpProtocol {\n    fn protocol_name(&self) -&gt; &'static str { \"mcp\" }\n    // ... other methods\n}\n\nRegister in create_tool_registry()\nAdd configuration options\n\n\n\n\n\nImplement the Tool trait:\n\npub struct DatabaseTool {\n    definition: ToolDefinition,\n}\n\n#[async_trait]\nimpl Tool for DatabaseTool {\n    async fn execute(&self, input: Value, context: ExecutionContext) -&gt; Result&lt;Value&gt; {\n        // Implementation\n    }\n    // ... other methods\n}\n\nAdd to appropriate protocol\nUpdate tool discovery\n\n\n\n\n\n\n\n\nCreate/read/update/delete flows via API ‚úÖ\nConcurrent access with proper error handling ‚úÖ\nValidation and business rule enforcement ‚úÖ\n\n\n\n\n\nHTTP and JSON tools available via /api/v1/tools ‚úÖ\nProtocol health checking ‚úÖ\nTool execution with proper context ‚úÖ\n\n\n\n\n\nMulti-source configuration loading ‚úÖ\nStorage backend selection ‚úÖ\nTool protocol configuration ‚úÖ\n\n\n\n\n\nEasy to add new storage backends ‚úÖ\nPluggable tool protocols ‚úÖ\nClean separation of concerns ‚úÖ\n\n\n\n\n\nComprehensive error handling ‚úÖ\nStructured logging ‚úÖ\nConcurrent access patterns ‚úÖ\nHealth monitoring ‚úÖ\n\n\n\n\n\nMemory storage handles 1000+ flows efficiently ‚úÖ\nConcurrent operations without blocking ‚úÖ\nTool execution with timeouts ‚úÖ\n\n\n\n\n\nThis implementation provides the solid foundation for Aceryx. The next development phases can build upon this architecture:\n\nVisual Flow Designer: ReactFlow integration with the storage API\nWASM Execution Fabric: Tool execution in WASM sandboxes\nEnterprise Connectors: Pega, SAP, Salesforce tool protocols\nMCP Integration: Model Context Protocol implementation\nRedis/PostgreSQL Storage: Production storage backends\nDistributed Execution: Multi-node tool execution\n\nThe trait-first design ensures that each addition integrates seamlessly with the existing system, maintaining the goal of becoming ‚ÄúThe Apache Camel of AI‚Äù for enterprise AI integration.\n\n\n\nBased on integration tests: - Flow Creation: 1000 flows in &lt;5 seconds - Flow Retrieval: 1000 flows in &lt;100ms - Concurrent Access: 50+ concurrent readers without issues - Tool Execution: HTTP tools complete in &lt;1 second - Memory Usage: Efficient with DashMap for concurrent collections\nThis implementation establishes Aceryx as a high-performance, enterprise-ready foundation for visual AI workflow orchestration."
  },
  {
    "objectID": "storage.html#architecture-overview",
    "href": "storage.html#architecture-overview",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "The implementation follows a modular, trait-based design that scales from development to production:\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Web UI        ‚îÇ    ‚îÇ   REST API       ‚îÇ    ‚îÇ   CLI Tools     ‚îÇ\n‚îÇ   (ReactFlow)   ‚îÇ    ‚îÇ   (Axum)         ‚îÇ    ‚îÇ   (Clap)        ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ                       ‚îÇ                       ‚îÇ\n         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                                 ‚îÇ\n                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n                    ‚îÇ   Core Application      ‚îÇ\n                    ‚îÇ   - Storage Traits      ‚îÇ\n                    ‚îÇ   - Tool Registry       ‚îÇ\n                    ‚îÇ   - Configuration       ‚îÇ\n                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                                 ‚îÇ\n         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n         ‚îÇ                       ‚îÇ                      ‚îÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Storage       ‚îÇ    ‚îÇ   Tool System     ‚îÇ    ‚îÇ   Execution   ‚îÇ\n‚îÇ   - Memory      ‚îÇ    ‚îÇ   - Native Tools  ‚îÇ    ‚îÇ   - Context   ‚îÇ\n‚îÇ   - Redis       ‚îÇ    ‚îÇ   - MCP Protocol  ‚îÇ    ‚îÇ   - Security  ‚îÇ\n‚îÇ   - PostgreSQL  ‚îÇ    ‚îÇ   - Custom Tools  ‚îÇ    ‚îÇ   - Timeouts  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
  },
  {
    "objectID": "storage.html#module-structure",
    "href": "storage.html#module-structure",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "src/\n‚îú‚îÄ‚îÄ main.rs                 # CLI entry point with storage & tools integration\n‚îú‚îÄ‚îÄ api/                    # REST API handlers\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs             # API router setup\n‚îÇ   ‚îú‚îÄ‚îÄ flows.rs           # Flow CRUD endpoints\n‚îÇ   ‚îú‚îÄ‚îÄ tools.rs           # Tool listing and execution\n‚îÇ   ‚îî‚îÄ‚îÄ middleware.rs      # Request logging, error handling\n‚îú‚îÄ‚îÄ config/                # Configuration management\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs             # Config loading with precedence\n‚îÇ   ‚îî‚îÄ‚îÄ types.rs           # Config structs and validation\n‚îú‚îÄ‚îÄ error.rs               # Error types and HTTP responses\n‚îú‚îÄ‚îÄ storage/               # Storage traits and implementations\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs            # FlowStorage trait definition\n‚îÇ   ‚îú‚îÄ‚îÄ memory.rs         # In-memory implementation\n‚îÇ   ‚îî‚îÄ‚îÄ types.rs          # Flow, ToolDefinition, domain types\n‚îú‚îÄ‚îÄ tools/                 # Universal tool system\n‚îÇ   ‚îú‚îÄ‚îÄ mod.rs            # Tool and ToolProtocol traits\n‚îÇ   ‚îî‚îÄ‚îÄ native.rs         # Built-in tools (HTTP, JSON)\n‚îî‚îÄ‚îÄ web/                   # Web interface\n    ‚îú‚îÄ‚îÄ mod.rs            # Server startup with integrations\n    ‚îú‚îÄ‚îÄ handlers.rs       # Web UI handlers\n    ‚îú‚îÄ‚îÄ static_assets.rs  # Embedded static files\n    ‚îî‚îÄ‚îÄ templates.rs      # Template rendering"
  },
  {
    "objectID": "storage.html#key-features-implemented",
    "href": "storage.html#key-features-implemented",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "FlowStorage trait: Universal interface for all storage backends\nMemory implementation: High-performance, concurrent in-memory storage\nReady for Redis/PostgreSQL: Trait design enables easy backend additions\nCRUD operations: Complete flow and tool management\nSearch & filtering: Full-text search and structured filtering\nVersioning support: Flow version management\n\n\n\n\n\nTool trait: Standard interface for all tool implementations\nToolProtocol trait: Plugin system for tool discovery and creation\nNative tools: Built-in HTTP request and JSON transformation tools\nTool registry: Centralized tool management with caching\nExecution context: Rich context for tool execution with timeouts\nHealth monitoring: Protocol and tool health checking\n\n\n\n\n\nRESTful endpoints: Complete CRUD API for flows and tools\nError handling: Structured error responses with proper HTTP codes\nRequest logging: Comprehensive request/response logging\nCORS support: Configurable CORS for web integration\nRate limiting: Basic rate limiting implementation\nHealth checks: System and component health endpoints\n\n\n\n\n\nMulti-source loading: CLI args &gt; env vars &gt; config file &gt; defaults\nValidation: Comprehensive configuration validation\nDevelopment/Production: Separate configuration templates\nTOML support: Human-readable configuration format\n\n\n\n\n\nConcurrent access: Thread-safe storage implementations\nRequest timeouts: Configurable execution timeouts\nStructured logging: JSON logging for production environments\nGraceful shutdown: Signal handling and cleanup\nPerformance monitoring: Basic metrics and health checks"
  },
  {
    "objectID": "storage.html#usage-examples",
    "href": "storage.html#usage-examples",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "# Development mode with defaults\ncargo run -- serve --dev\n\n# Production mode with custom config\ncargo run -- serve --config aceryx.production.toml --port 8080\n\n# With environment variables\nACERYX_STORAGE=memory ACERYX_PORT=3000 cargo run -- serve\n\n\n\n# List available tools\ncargo run -- tools list\n\n# Filter by category\ncargo run -- tools list --category http\n\n# Refresh tools from protocols\ncargo run -- tools refresh\n\n# Execute a tool\ncargo run -- tools execute json_transform --input '{\"data\": {\"test\": \"value\"}, \"operation\": \"validate\"}'\n\n\n\n# Generate sample configurations\ncargo run -- config                    # Development config\ncargo run -- config --production       # Production config\n\n\n\n# List flows\ncurl http://localhost:8080/api/v1/flows\n\n# Create a flow\ncurl -X POST http://localhost:8080/api/v1/flows \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"My Flow\", \"description\": \"Test flow\"}'\n\n# List tools\ncurl http://localhost:8080/api/v1/tools\n\n# Execute a tool\ncurl -X POST http://localhost:8080/api/v1/tools/execute/http_request \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"input\": {\"url\": \"https://httpbin.org/get\", \"method\": \"GET\"}}'"
  },
  {
    "objectID": "storage.html#testing",
    "href": "storage.html#testing",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "The implementation includes comprehensive tests:\n# Unit tests\ncargo test\n\n# Integration tests\ncargo test --test integration_tests\n\n# Performance tests\ncargo test test_performance_characteristics -- --nocapture\n\n# With all features\ncargo test --all-features\n\n\n\n‚úÖ Storage trait implementations\n‚úÖ Tool system functionality\n‚úÖ API endpoint behavior\n‚úÖ Error handling scenarios\n‚úÖ Configuration loading\n‚úÖ Concurrent access patterns\n‚úÖ Performance characteristics"
  },
  {
    "objectID": "storage.html#development-workflow",
    "href": "storage.html#development-workflow",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "Implement the FlowStorage trait:\n\npub struct RedisStorage {\n    client: redis::Client,\n}\n\n#[async_trait]\nimpl FlowStorage for RedisStorage {\n    async fn create_flow(&self, flow: Flow) -&gt; Result&lt;FlowId&gt; {\n        // Implementation\n    }\n    // ... other methods\n}\n\nAdd feature flag to Cargo.toml\nUpdate configuration types\nIntegrate in main.rs\n\n\n\n\n\nImplement the ToolProtocol trait:\n\npub struct McpProtocol {\n    // MCP client implementation\n}\n\n#[async_trait]\nimpl ToolProtocol for McpProtocol {\n    fn protocol_name(&self) -&gt; &'static str { \"mcp\" }\n    // ... other methods\n}\n\nRegister in create_tool_registry()\nAdd configuration options\n\n\n\n\n\nImplement the Tool trait:\n\npub struct DatabaseTool {\n    definition: ToolDefinition,\n}\n\n#[async_trait]\nimpl Tool for DatabaseTool {\n    async fn execute(&self, input: Value, context: ExecutionContext) -&gt; Result&lt;Value&gt; {\n        // Implementation\n    }\n    // ... other methods\n}\n\nAdd to appropriate protocol\nUpdate tool discovery"
  },
  {
    "objectID": "storage.html#success-criteria-met",
    "href": "storage.html#success-criteria-met",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "Create/read/update/delete flows via API ‚úÖ\nConcurrent access with proper error handling ‚úÖ\nValidation and business rule enforcement ‚úÖ\n\n\n\n\n\nHTTP and JSON tools available via /api/v1/tools ‚úÖ\nProtocol health checking ‚úÖ\nTool execution with proper context ‚úÖ\n\n\n\n\n\nMulti-source configuration loading ‚úÖ\nStorage backend selection ‚úÖ\nTool protocol configuration ‚úÖ\n\n\n\n\n\nEasy to add new storage backends ‚úÖ\nPluggable tool protocols ‚úÖ\nClean separation of concerns ‚úÖ\n\n\n\n\n\nComprehensive error handling ‚úÖ\nStructured logging ‚úÖ\nConcurrent access patterns ‚úÖ\nHealth monitoring ‚úÖ\n\n\n\n\n\nMemory storage handles 1000+ flows efficiently ‚úÖ\nConcurrent operations without blocking ‚úÖ\nTool execution with timeouts ‚úÖ"
  },
  {
    "objectID": "storage.html#next-steps",
    "href": "storage.html#next-steps",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "This implementation provides the solid foundation for Aceryx. The next development phases can build upon this architecture:\n\nVisual Flow Designer: ReactFlow integration with the storage API\nWASM Execution Fabric: Tool execution in WASM sandboxes\nEnterprise Connectors: Pega, SAP, Salesforce tool protocols\nMCP Integration: Model Context Protocol implementation\nRedis/PostgreSQL Storage: Production storage backends\nDistributed Execution: Multi-node tool execution\n\nThe trait-first design ensures that each addition integrates seamlessly with the existing system, maintaining the goal of becoming ‚ÄúThe Apache Camel of AI‚Äù for enterprise AI integration."
  },
  {
    "objectID": "storage.html#performance-characteristics",
    "href": "storage.html#performance-characteristics",
    "title": "Aceryx Core Storage & Universal Tool System Implementation",
    "section": "",
    "text": "Based on integration tests: - Flow Creation: 1000 flows in &lt;5 seconds - Flow Retrieval: 1000 flows in &lt;100ms - Concurrent Access: 50+ concurrent readers without issues - Tool Execution: HTTP tools complete in &lt;1 second - Memory Usage: Efficient with DashMap for concurrent collections\nThis implementation establishes Aceryx as a high-performance, enterprise-ready foundation for visual AI workflow orchestration."
  }
]